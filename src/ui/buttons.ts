// src/ui/buttons.ts
import { InlineKeyboardButton } from "node-telegram-bot-api";
import { TXT } from "./text";
import { mkCb } from "./cb";
import { CB } from "../types";

export const kb = {
  menu(): InlineKeyboardButton[][] {
    return [
      [{ text: TXT.btn.roulette, callback_data: mkCb(CB.RL, "find") }],
      [{ text: TXT.btn.browse,   callback_data: mkCb(CB.BRW, "start") }],
      [{ text: TXT.btn.profile,  callback_data: mkCb(CB.PRF, "open") }],
      [{ text: TXT.btn.help,     callback_data: mkCb(CB.SYS, "help") }],
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –±–∞–∑–æ–≤—ã–µ 5 –∫–Ω–æ–ø–æ–∫ (–ø–æ—Ä—è–¥–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –¢–ó)
  profile(): InlineKeyboardButton[][] {
    return [
      [{ text: TXT.profileBtns.roulette, callback_data: mkCb(CB.RL, "find") }],
      [{ text: TXT.profileBtns.browse,   callback_data: mkCb(CB.BRW, "start") }],
      [{ text: TXT.profileBtns.photo,    callback_data: mkCb(CB.PRF, "photo") }],
      [{ text: TXT.profileBtns.about,    callback_data: mkCb(CB.PRF, "about") }],
      [{ text: TXT.profileBtns.restart,  callback_data: mkCb(CB.PRF, "restart_confirm") }],
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å ‚Äî —Ç–∞ –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–æ —Å –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ (‚óÄ i/n ‚ñ∂)
  profileWithNav(total: number, currentIndex: number): InlineKeyboardButton[][] {
    const base = this.profile();
    if (total <= 1) return base;

    // –≤—ã—á–∏—Å–ª–∏–º —Å–æ—Å–µ–¥–Ω–∏–µ –∏–Ω–¥–µ–∫—Å—ã (–∫—Ä—É–≥–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
    const prev = (currentIndex - 1 + total) % total;
    const next = (currentIndex + 1) % total;

    const navRow: InlineKeyboardButton[] = [
      { text: "‚óÄ", callback_data: mkCb(CB.PRF, "phnav", prev) },
      { text: `${currentIndex + 1}/${total}`, callback_data: mkCb(CB.PRF, "noop") },
      { text: "‚ñ∂", callback_data: mkCb(CB.PRF, "phnav", next) },
    ];
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è ‚Äî —Å–≤–µ—Ä—Ö—É, –¥–∞–ª–µ–µ 5 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    return [navRow, ...base];
  },

  regGender(): InlineKeyboardButton[][] {
    return [
      [{ text: "–ú—É–∂—á–∏–Ω–∞", callback_data: mkCb(CB.REG, "gender", "m") }],
      [{ text: "–ñ–µ–Ω—â–∏–Ω–∞", callback_data: mkCb(CB.REG, "gender", "f") }],
    ];
  },

  regSeek(): InlineKeyboardButton[][] {
    return [
      [{ text: "–ò—â—É –º—É–∂—á–∏–Ω",  callback_data: mkCb(CB.REG, "seek", "m") }],
      [{ text: "–ò—â—É –∂–µ–Ω—â–∏–Ω",  callback_data: mkCb(CB.REG, "seek", "f") }],
      [{ text: "–û–±–æ–∏—Ö",       callback_data: mkCb(CB.REG, "seek", "b") }],
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —à–∞–≥–µ —Ñ–æ—Ç–æ
  regPhotoActions(): InlineKeyboardButton[][] {
    return [
      [{ text: "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data: mkCb(CB.REG, "photo_import") }],
      [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ",            callback_data: mkCb(CB.REG, "photo_done") }],
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Ä–µ—Ç—Ä–∞–π –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
  regPhotoRetryActions(): InlineKeyboardButton[][] {
    return [
      [{ text: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç", callback_data: mkCb(CB.REG, "photo_import") }],
      [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ",           callback_data: mkCb(CB.REG, "photo_done") }],
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å: –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ
  prfPhotoActions(): InlineKeyboardButton[][] {
    return [
      [{ text: "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data: mkCb(CB.PRF, "photo_import") }],
      [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ",            callback_data: mkCb(CB.PRF, "photo_done") }],
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å: —Ä–µ—Ç—Ä–∞–π –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  prfPhotoRetryActions(): InlineKeyboardButton[][] {
    return [
      [{ text: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç", callback_data: mkCb(CB.PRF, "photo_import") }],
      [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ",           callback_data: mkCb(CB.PRF, "photo_done") }],
    ];
  },

  browseCard(candidateId: number): InlineKeyboardButton[][] {
    return [
      [{ text: "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",    callback_data: mkCb(CB.BRW, "next") }],
      [{ text: "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",     callback_data: mkCb(CB.CR,  "req", candidateId) }],
      [{ text: "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data: mkCb(CB.REP, "card", candidateId) }],
    ];
  },

  requestIncoming(crId: number): InlineKeyboardButton[][] {
    return [
      [
        { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",  callback_data: mkCb(CB.CR, "accept", crId) },
        { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: mkCb(CB.CR, "decline", crId) },
      ],
      [{ text: "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data: mkCb(CB.REP, "request", crId) }],
    ];
  },
};
