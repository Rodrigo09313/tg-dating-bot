// src/ui/keyboards.ts
// –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏

import { mkCb } from "./cb";
import { CB } from "../types";

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ –ö–ù–û–ü–û–ö =====
export const BUTTONS = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  FIND_PAIR: "üíû –ù–∞–π—Ç–∏ –ø–∞—Ä—É",
  FAVORITES: "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", 
  REQUESTS: "üíå –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã",
  PROFILE: "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
  HELP: "‚ùì –ü–æ–º–æ—â—å",
  MENU: "üè† –í –º–µ–Ω—é",
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  MALE: "üë® –ú—É–∂—á–∏–Ω–∞",
  FEMALE: "üë© –ñ–µ–Ω—â–∏–Ω–∞", 
  SEEK_MALE: "üë® –ú—É–∂—á–∏–Ω",
  SEEK_FEMALE: "üë© –ñ–µ–Ω—â–∏–Ω",
  SEEK_ALL: "üë• –í—Å–µ—Ö",
  SKIP: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
  
  // –§–æ—Ç–æ
  IMPORT_PHOTOS: "üì• –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ç–æ",
  DONE: "‚úÖ –ì–æ—Ç–æ–≤–æ",
  CONFIRM: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
  RETRY: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
  CHANGE_PHOTO: "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  NEXT: "üíû –°–ª–µ–¥—É—é—â–∏–π",
  WRITE: "üíå –ù–∞–ø–∏—Å–∞—Ç—å", 
  ADD_FAVORITE: "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
  REPORT: "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
  
  // –ó–∞–ø—Ä–æ—Å—ã
  ACCEPT: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
  DECLINE: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
  
  // –†—É–ª–µ—Ç–∫–∞
  ROULETTE: "üé≤ –ß–∞—Ç —Ä—É–ª–µ—Ç–∫–∞",
  STOP_SEARCH: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
  STOP_CHAT: "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç",
  
  // –ü—Ä–æ—Ñ–∏–ª—å
  PHOTOS: "üñºÔ∏è –ú–æ–∏ —Ñ–æ—Ç–æ",
  ABOUT: "üìù –û —Å–µ–±–µ", 
  RESTART: "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å",
  RESTART_CONFIRM: "‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å",
  CANCEL: "‚ùå –û—Ç–º–µ–Ω–∞",
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
  AGAIN: "üîÑ –ï—â—ë —Ä–∞–∑",
  FIND_MORE: "üíû –ù–∞–π—Ç–∏ –µ—â—ë",
} as const;

// ===== –û–°–ù–û–í–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
export type InlineKeyboardButton = { text: string; callback_data: string };

export const Keyboards = {
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  mainMenu(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.ROULETTE, callback_data: mkCb(CB.RL, "find") }],
      [{ text: BUTTONS.FIND_PAIR, callback_data: mkCb(CB.BRW, "start") }],
      [{ text: BUTTONS.PROFILE, callback_data: mkCb(CB.PRF, "open") }],
      [{ text: BUTTONS.HELP, callback_data: mkCb(CB.SYS, "help") }]
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å
  profile(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.FIND_PAIR, callback_data: mkCb(CB.BRW, "start") }],
      [{ text: BUTTONS.FAVORITES, callback_data: mkCb(CB.FAV, "list") }],
      [{ text: BUTTONS.REQUESTS, callback_data: mkCb(CB.CR, "list") }],
      [{ text: BUTTONS.PHOTOS, callback_data: mkCb(CB.PRF, "photo") }],
      [{ text: BUTTONS.ABOUT, callback_data: mkCb(CB.PRF, "about") }],
      [{ text: BUTTONS.RESTART, callback_data: mkCb(CB.PRF, "restart_confirm") }]
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Ñ–æ—Ç–æ
  profileWithNav(total: number, currentIndex: number): InlineKeyboardButton[][] {
    const base = this.profile();
    if (total <= 1) return base;

    const prev = (currentIndex - 1 + total) % total;
    const next = (currentIndex + 1) % total;

    const navRow: InlineKeyboardButton[] = [
      { text: "‚óÄÔ∏è", callback_data: mkCb(CB.PRF, "phnav", prev) },
      { text: `üì∏ ${currentIndex + 1}/${total}`, callback_data: mkCb(CB.PRF, "noop") },
      { text: "‚ñ∂Ô∏è", callback_data: mkCb(CB.PRF, "phnav", next) },
    ];
    return [navRow, ...base];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–æ–ª
  regGender(): InlineKeyboardButton[][] {
    return [
      [
        { text: BUTTONS.MALE, callback_data: mkCb(CB.REG, "gender", "m") },
        { text: BUTTONS.FEMALE, callback_data: mkCb(CB.REG, "gender", "f") }
      ]
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∫–æ–≥–æ –∏—â–µ—Ç
  regSeek(): InlineKeyboardButton[][] {
    return [
      [
        { text: BUTTONS.SEEK_MALE, callback_data: mkCb(CB.REG, "seek", "m") },
        { text: BUTTONS.SEEK_FEMALE, callback_data: mkCb(CB.REG, "seek", "f") }
      ],
      [
        { text: BUTTONS.SEEK_ALL, callback_data: mkCb(CB.REG, "seek", "b") }
      ]
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  regPhotoMethod(): InlineKeyboardButton[][] {
    return [
      [{ text: "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data: mkCb(CB.REG, "photo_import") }],
      [{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data: mkCb(CB.REG, "photo_upload") }]
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Ñ–æ—Ç–æ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  regPhotoActions(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.IMPORT_PHOTOS, callback_data: mkCb(CB.REG, "photo_import") }],
      [{ text: BUTTONS.DONE, callback_data: mkCb(CB.REG, "photo_done") }]
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
  regPhotoUpload(): InlineKeyboardButton[][] {
    return [
      [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: mkCb(CB.REG, "photo_method") }],
      [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: mkCb(CB.REG, "photo_done") }]
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∫–∞—Ä—É—Å–µ–ª—å —Ñ–æ—Ç–æ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  regPhotoCarousel(photoCount: number, currentIndex: number): InlineKeyboardButton[][] {
    if (photoCount <= 1) {
      return [
        [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: mkCb(CB.REG, "photo_method") }],
        [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: mkCb(CB.REG, "photo_done") }]
      ];
    }

    const prev = (currentIndex - 1 + photoCount) % photoCount;
    const next = (currentIndex + 1) % photoCount;

    return [
      [
        { text: "‚óÄÔ∏è", callback_data: mkCb(CB.REG, "photo_nav", prev) },
        { text: `üì∏ ${currentIndex + 1}/${photoCount}`, callback_data: mkCb(CB.REG, "noop") },
        { text: "‚ñ∂Ô∏è", callback_data: mkCb(CB.REG, "photo_nav", next) }
      ],
      [
        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: mkCb(CB.REG, "photo_method") },
        { text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: mkCb(CB.REG, "photo_done") }
      ]
    ];
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –Ω–µ—Ç —Ñ–æ—Ç–æ
  regNoPhoto(): InlineKeyboardButton[][] {
    return [
      [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: mkCb(CB.REG, "photo_method") }],
      [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: mkCb(CB.REG, "photo_done") }]
    ];
  },

  regPhotoRetryActions(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.RETRY, callback_data: mkCb(CB.REG, "photo_import") }],
      [{ text: BUTTONS.DONE, callback_data: mkCb(CB.REG, "photo_done") }]
    ];
  },

  // –ü—Ä–æ—Ñ–∏–ª—å - —Ñ–æ—Ç–æ
  prfPhotoActions(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.IMPORT_PHOTOS, callback_data: mkCb(CB.PRF, "photo_import") }],
      [{ text: BUTTONS.DONE, callback_data: mkCb(CB.PRF, "photo_done") }]
    ];
  },

  prfPhotoRetryActions(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.RETRY, callback_data: mkCb(CB.PRF, "photo_import") }],
      [{ text: BUTTONS.DONE, callback_data: mkCb(CB.PRF, "photo_done") }]
    ];
  },

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
  browseCard(candidateId: number): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.NEXT, callback_data: mkCb(CB.BRW, "next") }],
      [
        { text: BUTTONS.WRITE, callback_data: mkCb(CB.CR, "req", candidateId) },
        { text: BUTTONS.ADD_FAVORITE, callback_data: mkCb(CB.FAV, "add", candidateId) }
      ],
      [{ text: BUTTONS.REPORT, callback_data: mkCb(CB.REP, "card", candidateId) }],
      [{ text: BUTTONS.MENU, callback_data: mkCb(CB.SYS, "menu") }]
    ];
  },

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Ñ–æ—Ç–æ
  browseCardWithNav(candidateId: number, total: number, currentIndex: number): InlineKeyboardButton[][] {
    const base = this.browseCard(candidateId);
    if (total <= 1) return base;

    const prev = (currentIndex - 1 + total) % total;
    const next = (currentIndex + 1) % total;

    const navRow: InlineKeyboardButton[] = [
      { text: "‚óÄÔ∏è", callback_data: mkCb(CB.BRW, "phnav", prev) },
      { text: `üì∏ ${currentIndex + 1}/${total}`, callback_data: mkCb(CB.BRW, "noop") },
      { text: "‚ñ∂Ô∏è", callback_data: mkCb(CB.BRW, "phnav", next) },
    ];
    return [navRow, ...base];
  },

  // –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  requestIncoming(crId: number): InlineKeyboardButton[][] {
    return [
      [
        { text: BUTTONS.ACCEPT, callback_data: mkCb(CB.CR, "accept", crId) },
        { text: BUTTONS.DECLINE, callback_data: mkCb(CB.CR, "decline", crId) }
      ],
      [
        { text: BUTTONS.ADD_FAVORITE, callback_data: mkCb(CB.FAV, "add", crId) },
        { text: BUTTONS.REPORT, callback_data: mkCb(CB.REP, "request", crId) }
      ]
    ];
  },

  // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  favoritesList(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.FIND_MORE, callback_data: mkCb(CB.BRW, "start") }],
      [{ text: BUTTONS.PROFILE, callback_data: mkCb(CB.PRF, "open") }],
      [{ text: BUTTONS.MENU, callback_data: mkCb(CB.SYS, "menu") }]
    ];
  },

  // –†—É–ª–µ—Ç–∫–∞
  rouletteWaiting(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.STOP_SEARCH, callback_data: mkCb(CB.RL, "stop") }]
    ];
  },

  rouletteChat(): InlineKeyboardButton[][] {
    return [
      [{ text: BUTTONS.STOP_CHAT, callback_data: mkCb(CB.RL, "stop") }]
    ];
  },

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
  restartConfirm(): InlineKeyboardButton[][] {
    return [
      [
        { text: BUTTONS.RESTART_CONFIRM, callback_data: mkCb(CB.PRF, "restart_yes") },
        { text: BUTTONS.CANCEL, callback_data: mkCb(CB.PRF, "open") }
      ]
    ];
  },

  // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
  backToMenu(): InlineKeyboardButton[][] {
    return [[{ text: BUTTONS.MENU, callback_data: mkCb(CB.SYS, "menu") }]];
  },

  // –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  empty(): InlineKeyboardButton[][] {
    return [];
  }
};

// ===== –£–¢–ò–õ–ò–¢–´ =====
export const KeyboardUtils = {
  // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∫ –ª—é–±–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
  withBackToMenu(keyboard: InlineKeyboardButton[][]): InlineKeyboardButton[][] {
    return [...keyboard, ...Keyboards.backToMenu()];
  },

  // –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º callback
  button(text: string, callback: string): InlineKeyboardButton {
    return { text, callback_data: callback };
  },

  // –°–æ–∑–¥–∞—Ç—å —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
  row(...buttons: InlineKeyboardButton[]): InlineKeyboardButton[] {
    return buttons;
  },

  // –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ä—è–¥–æ–≤
  keyboard(...rows: InlineKeyboardButton[][]): InlineKeyboardButton[][] {
    return rows;
  }
};
