// src/bot/roulette.ts
// –ß–∞—Ç-—Ä—É–ª–µ—Ç–∫–∞ - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å –±–ª–∏–∂–∞–π—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

import TelegramBot from "node-telegram-bot-api";
import { query } from "../db";
import { DbUser, sendScreen, setState } from "./helpers";
import { Keyboards } from "../ui/keyboards";
import { logger } from "../lib/logger";
import { ErrorHandler } from "../lib/errorHandler";

export async function startRoulette(bot: TelegramBot, chatId: number, user: DbUser) {
  try {
    logger.userAction('start_roulette', chatId, chatId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    if (user.status !== 'active') {
      await sendScreen(bot, chatId, user, { text: "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é." });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
    const inQueue = await query<{ user_id: number }>(
      "SELECT user_id FROM roulette_queue WHERE user_id = $1",
      [chatId]
    );
    
    if (inQueue.rows.length > 0) {
      await sendScreen(bot, chatId, user, { text: "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä—É–ª–µ—Ç–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ..." });
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    await query(`
      INSERT INTO roulette_queue (user_id, joined_at, geom)
      VALUES ($1, now(), (SELECT geom FROM users WHERE tg_id = $1))
    `, [chatId]);

    await setState(chatId, 'roulette_waiting');
    
    await sendScreen(bot, chatId, user, {
      text: "üé≤ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –Ω–∞–π–¥–µ—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞.",
      keyboard: Keyboards.rouletteWaiting()
    });

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–∞—Ä—É
    await tryMatchPair(bot, chatId, user);
    
  } catch (error) {
    await ErrorHandler.handleUserError(error as Error, chatId, chatId, 'start_roulette');
    await sendScreen(bot, chatId, user, { text: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
  }
}

export async function stopRoulette(bot: TelegramBot, chatId: number, user: DbUser) {
  try {
    logger.userAction('stop_roulette', chatId, chatId);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    await query("DELETE FROM roulette_queue WHERE user_id = $1", [chatId]);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    await query(`
      UPDATE roulette_pairs 
      SET status = 'ended', ended_at = now() 
      WHERE (u1 = $1 OR u2 = $1) AND status = 'active'
    `, [chatId]);

    await setState(chatId, 'idle');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const { showMainMenu } = await import("./menu");
    await showMainMenu(bot, chatId, user);
    
  } catch (error) {
    await ErrorHandler.handleUserError(error as Error, chatId, chatId, 'stop_roulette');
    await sendScreen(bot, chatId, user, { text: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
  }
}

async function tryMatchPair(bot: TelegramBot, chatId: number, user: DbUser) {
  try {
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    const match = await query<{
      user_id: number;
      name: string | null;
      age: number | null;
      city_name: string | null;
    }>(`
      SELECT rq.user_id, u.name, u.age, u.city_name
      FROM roulette_queue rq
      JOIN users u ON u.tg_id = rq.user_id
      WHERE rq.user_id != $1 
        AND u.status = 'active'
        AND rq.locked_by IS NULL
        AND NOT EXISTS (
          SELECT 1 FROM roulette_pairs rp 
          WHERE (rp.u1 = $1 AND rp.u2 = rq.user_id) 
             OR (rp.u2 = $1 AND rp.u1 = rq.user_id)
          AND rp.status = 'active'
        )
      ORDER BY RANDOM()
      LIMIT 1
    `, [chatId]);

    if (match.rows.length === 0) {
      // –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
      setTimeout(() => tryMatchPair(bot, chatId, user), 5000);
      return;
    }

    const partner = match.rows[0];
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await query(`
      UPDATE roulette_queue 
      SET locked_by = $1, locked_at = now() 
      WHERE user_id = $2
    `, [chatId, partner.user_id]);

    await query(`
      UPDATE roulette_queue 
      SET locked_by = $1, locked_at = now() 
      WHERE user_id = $1
    `, [chatId]);

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
    await query(`
      INSERT INTO roulette_pairs (u1, u2, status, started_at)
      VALUES (LEAST($1, $2), GREATEST($1, $2), 'active', now())
    `, [chatId, partner.user_id]);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    await query("DELETE FROM roulette_queue WHERE user_id IN ($1, $2)", [chatId, partner.user_id]);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const partnerInfo = `${partner.name || "–ê–Ω–æ–Ω–∏–º"}${partner.age ? ", " + partner.age : ""}${partner.city_name ? ", " + partner.city_name : ""}`;
    
    await sendScreen(bot, chatId, user, {
      text: `üéâ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n${partnerInfo}\n\n–ß–∞—Ç –Ω–∞—á–∞–ª—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è.`,
      keyboard: Keyboards.rouletteChat()
    });

    await sendScreen(bot, partner.user_id, { 
      tg_id: partner.user_id, 
      username: null, 
      name: user.name, 
      state: null, 
      status: 'active' as const, 
      last_screen_msg_id: null, 
      last_screen_at: null 
    } as DbUser, {
      text: `üéâ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n${user.name || "–ê–Ω–æ–Ω–∏–º"}\n\n–ß–∞—Ç –Ω–∞—á–∞–ª—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è.`,
      keyboard: Keyboards.rouletteChat()
    });

    await setState(chatId, 'roulette_chat');
    await setState(partner.user_id, 'roulette_chat');
    
  } catch (error) {
    await ErrorHandler.handleUserError(error as Error, chatId, chatId, 'try_match_pair');
  }
}
