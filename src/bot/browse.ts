import { esc } from "../lib/html";
// src/bot/browse.ts
// –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥—Ä—è–¥, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö.
// –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ —Å –Ω–∞—á–∞–ª–∞.
// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ, –ø–æ–¥–ø–∏—Å—å —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–Ω–æ–ø–∫–∏ ‚Äî –∏–∑ kb.browseCard.

import TelegramBot from "node-telegram-bot-api";
import { query } from "../db";
import { DbUser, sendScreen, setState } from "./helpers";
import { Keyboards } from "../ui/keyboards";
import { logger } from "../lib/logger";
import { ErrorHandler } from "../lib/errorHandler";
import { TXT } from "../ui/text";
import { mkCb } from "../ui/cb";
import { CB } from "../types";

// –ö–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—É–±—Ä–∞–Ω–æ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã)

type CandidateRow = {
  tg_id: number;
  name: string | null;
  age: number | null;
  city_name: string | null;
  about: string | null;
  file_id: string | null;   // –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
  dist_km: number | null;   // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
};

// –°–æ–±–∏—Ä–∞–µ–º –ø—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
async function pickCandidate(currentId: number): Promise<CandidateRow | null> {
  // SQL:
  //  - –∞–∫—Ç–∏–≤–Ω—ã–µ + –Ω–µ —è
  //  - —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
  //  - –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ browse_seen
  //  - –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –ø—É–ª–∞, –∑–∞—Ç–µ–º 1
  const sql = `
    WITH me AS (
      SELECT tg_id, geom
      FROM users WHERE tg_id = $1
    ),
    base AS (
      SELECT u.tg_id, u.name, u.age, u.city_name, u.about,
             -- –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: is_main –∏–ª–∏ pos=1
             (SELECT p.file_id
              FROM photos p
              WHERE p.user_id = u.tg_id
              ORDER BY p.is_main DESC, p.pos ASC
              LIMIT 1) AS file_id,
             -- —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º (–µ—Å–ª–∏ –æ–±–µ –≥–µ–æ—Ç–æ—á–∫–∏ –µ—Å—Ç—å)
             CASE
               WHEN u.geom IS NOT NULL AND (SELECT geom FROM me) IS NOT NULL
                 THEN ST_DistanceSphere(u.geom, (SELECT geom FROM me)) / 1000.0
               ELSE NULL
             END AS dist_km
      FROM users u
      WHERE u.status = 'active'
        AND u.tg_id <> $1
        AND EXISTS (SELECT 1 FROM photos px WHERE px.user_id = u.tg_id)
        -- –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö
        AND NOT EXISTS (
          SELECT 1 FROM browse_seen bs
          WHERE bs.user_id = $1 AND bs.seen_user_id = u.tg_id
        )
    )
    SELECT * FROM base
    ORDER BY random()
    LIMIT 1;
  `;

  const r = await query<CandidateRow>(sql, [currentId]);

  return r.rows[0] ?? null;
}

// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∫–∞—Ä—Ç–æ—á–∫–∏
export function buildCardCaption(c: CandidateRow): string {
  const parts: string[] = [];
  const header = `${c.name ?? TXT.browse.noName}${c.age ? ", " + c.age : ""}${c.city_name ? ", " + c.city_name : ""}`;
  parts.push(`<b>${header}</b>`);
  if (c.about) parts.push(esc(c.about).slice(0, 300));

  if (typeof c.dist_km === "number") {
    const km = Math.max(0, Math.round(c.dist_km * 10) / 10); // 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    parts.push(`üìç –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ~${km} –∫–º –æ—Ç –≤–∞—Å`);
  }
  return parts.join("\n");
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
export async function getCandidatePhotos(candidateId: number): Promise<string[]> {
  const r = await query<{ file_id: string }>(
    `SELECT file_id
     FROM photos
     WHERE user_id = $1
     ORDER BY is_main DESC, pos ASC, id ASC
     LIMIT 5`, [candidateId]
  );
  return r.rows.map((x: { file_id: string }) => x.file_id);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–∏–∫–æ–≥–æ —Ä—è–¥–æ–º")
export async function browseShowNext(bot: TelegramBot, chatId: number, user: DbUser) {
  // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ browse/browse_card
  await setState(chatId, "browse_card");

  const cand = await pickCandidate(chatId);
  if (!cand) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏ –∏—â–µ–º —Å–Ω–æ–≤–∞
    await query("DELETE FROM browse_seen WHERE user_id = $1", [chatId]);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–Ω–æ–≤–∞
    const newCand = await pickCandidate(chatId);
    if (!newCand) {
      // –ï—Å–ª–∏ –∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await sendScreen(bot, chatId, user, {
        text: [
          TXT.browse.noResults,
          "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
        ].join("\n"),
        keyboard: [
          [{ text: TXT.browse.tryAgain, callback_data: mkCb(CB.BRW, "next") }],
          [{ text: TXT.browse.backToMenu, callback_data: mkCb(CB.SYS, "menu") }],
        ]
      });
      return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const finalCand = newCand;
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ
    await query(
      `INSERT INTO browse_seen (user_id, seen_user_id, ts)
       VALUES ($1, $2, now())
       ON CONFLICT DO NOTHING`,
      [chatId, finalCand.tg_id]
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–∞—Ä—É—Å–µ–ª—å—é —Ñ–æ—Ç–æ
    await showBrowseCard(bot, chatId, user, finalCand);
    return;
  }

  // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ
  await query(
    `INSERT INTO browse_seen (user_id, seen_user_id, ts)
     VALUES ($1, $2, now())
     ON CONFLICT DO NOTHING`,
    [chatId, cand.tg_id]
  );

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–∞—Ä—É—Å–µ–ª—å—é —Ñ–æ—Ç–æ
  await showBrowseCard(bot, chatId, user, cand);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∫–∞—Ä—É—Å–µ–ª—å—é —Ñ–æ—Ç–æ
async function showBrowseCard(bot: TelegramBot, chatId: number, user: DbUser, candidate: CandidateRow) {
  const photos = await getCandidatePhotos(candidate.tg_id);
  const caption = buildCardCaption(candidate);

  if (photos.length > 0) {
    const currentIndex = 0;
    await sendScreen(bot, chatId, user, {
      photoFileId: photos[currentIndex],
      caption,
      keyboard: Keyboards.browseCardWithNav(candidate.tg_id, photos.length, currentIndex),
      parse_mode: "HTML",
    });
  } else {
    await sendScreen(bot, chatId, user, { 
      text: caption, 
      keyboard: Keyboards.browseCard(candidate.tg_id),
      parse_mode: "HTML"
    });
  }
}

// –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ
export async function getCurrentBrowseCandidate(chatId: number): Promise<number | null> {
  try {
    const result = await query<{ seen_user_id: number }>(
      `SELECT seen_user_id 
       FROM browse_seen 
       WHERE user_id = $1 
       ORDER BY ts DESC 
       LIMIT 1`,
      [chatId]
    );
    return result.rows[0]?.seen_user_id || null;
  } catch (error) {
    logger.error("Failed to get current browse candidate", {
      action: 'get_current_browse_candidate',
      chatId,
      error: error as Error
    });
    return null;
  }
}

