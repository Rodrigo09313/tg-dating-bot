// src/bot/browse.ts
// –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º: —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –≥–æ—Ä–æ–¥/—Ä–∞–¥–∏—É—Å, –∏—Å–∫–ª—é—á–∏—Ç—å —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö.
// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ, –ø–æ–¥–ø–∏—Å—å —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–Ω–æ–ø–∫–∏ ‚Äî –∏–∑ kb.browseCard.

import TelegramBot from "node-telegram-bot-api";
import { query } from "../db";
import { DbUser, sendScreen, setState } from "./helpers";
import { kb } from "../ui/buttons";

// –ö–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_RADIUS_KM = Number(process.env.BROWSE_RADIUS_KM ?? 50); // —Ä–∞–¥–∏—É—Å –æ—Ç–±–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≥–µ–æ

type CandidateRow = {
  tg_id: number;
  name: string | null;
  age: number | null;
  city_name: string | null;
  about: string | null;
  file_id: string | null;   // –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
  dist_km: number | null;   // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
};

// –°–æ–±–∏—Ä–∞–µ–º –ø—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –≥–µ–æ, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
async function pickCandidate(currentId: number, radiusKm: number): Promise<CandidateRow | null> {
  // –ë–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const meQ = await query<{
    gender: "m" | "f" | null,
    seek: "m" | "f" | "b" | null,
    city_name: string | null,
    has_geom: boolean,
  }>(`
    SELECT gender, seek, city_name, geom IS NOT NULL AS has_geom
    FROM users WHERE tg_id = $1
  `, [currentId]);
  const me = meQ.rows[0];
  if (!me) return null;

  const wantM = me.seek === "m" || me.seek === "b";
  const wantF = me.seek === "f" || me.seek === "b";
  const myIsM = me.gender === "m";
  const myIsF = me.gender === "f";

  // SQL:
  //  - –∞–∫—Ç–∏–≤–Ω—ã–µ + –Ω–µ —è
  //  - —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
  //  - –≤–∑–∞–∏–º–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –ø–æ–ª—É/–ø–æ–∏—Å–∫—É
  //  - –≥–µ–æ—Ñ–∏–ª—å—Ç—Ä:
  //      (–æ–±–∞ —Å geom -> –≤ —Ä–∞–¥–∏—É—Å–µ) OR (–æ–±–∞ —Å city_name –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞)
  //  - –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ browse_seen
  //  - –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –ø—É–ª–∞ –¥–æ 50, –∑–∞—Ç–µ–º 1
  const sql = `
    WITH me AS (
      SELECT tg_id, geom, city_name
      FROM users WHERE tg_id = $1
    ),
    base AS (
      SELECT u.tg_id, u.name, u.age, u.city_name, u.about,
             -- –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: is_main –∏–ª–∏ pos=1
             (SELECT p.file_id
              FROM photos p
              WHERE p.user_id = u.tg_id
              ORDER BY p.is_main DESC, p.pos ASC
              LIMIT 1) AS file_id,
             -- —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º (–µ—Å–ª–∏ –æ–±–µ –≥–µ–æ—Ç–æ—á–∫–∏ –µ—Å—Ç—å)
             CASE
               WHEN u.geom IS NOT NULL AND (SELECT geom FROM me) IS NOT NULL
                 THEN ST_DistanceSphere(u.geom, (SELECT geom FROM me)) / 1000.0
               ELSE NULL
             END AS dist_km
      FROM users u
      WHERE u.status = 'active'
        AND u.tg_id <> $1
        AND EXISTS (SELECT 1 FROM photos px WHERE px.user_id = u.tg_id)
        -- —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —è —Ö–æ—á—É –µ–≥–æ –ø–æ–ª, –∞ –æ–Ω —Ö–æ—á–µ—Ç –º–æ–π –ø–æ–ª (–∏–ª–∏ 'b')
        AND (
              ($2::bool = TRUE AND u.gender = 'm') OR
              ($3::bool = TRUE AND u.gender = 'f')
            )
        AND (
              (u.seek = 'b') OR
              (u.seek = 'm' AND $4::bool = TRUE) OR
              (u.seek = 'f' AND $5::bool = TRUE)
            )
        -- –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö
        AND NOT EXISTS (
          SELECT 1 FROM browse_seen bs
          WHERE bs.user_id = $1 AND bs.seen_user_id = u.tg_id
        )
        -- –≥–µ–æ—Ñ–∏–ª—å—Ç—Ä
        AND (
          -- –æ–±–∞ —Å –≥–µ–æ -> –ø–æ —Ä–∞–¥–∏—É—Å—É
          (u.geom IS NOT NULL AND (SELECT has_geom FROM (SELECT geom IS NOT NULL AS has_geom FROM users WHERE tg_id=$1) x) = TRUE
             AND ST_DWithin(u.geom::geography, (SELECT geom FROM me)::geography, $6 * 1000)
          )
          OR
          -- –æ–±–∞ —Å –≥–æ—Ä–æ–¥–æ–º –∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç city_name
          (u.city_name IS NOT NULL AND (SELECT city_name FROM me) IS NOT NULL
             AND lower(u.city_name) = lower((SELECT city_name FROM me))
          )
        )
    )
    SELECT * FROM base
    ORDER BY random()
    LIMIT 1;
  `;

  const r = await query<CandidateRow>(sql, [
    currentId,
    wantM,          // $2
    wantF,          // $3
    myIsM,          // $4
    myIsF,          // $5
    radiusKm,       // $6
  ]);

  return r.rows[0] ?? null;
}

// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∫–∞—Ä—Ç–æ—á–∫–∏
function buildCardCaption(c: CandidateRow): string {
  const parts: string[] = [];
  const header = `${c.name ?? "–ë–µ–∑ –∏–º–µ–Ω–∏"}${c.age ? ", " + c.age : ""}${c.city_name ? ", " + c.city_name : ""}`;
  parts.push(`<b>${header}</b>`);
  if (c.about) parts.push(c.about.slice(0, 300));

  if (typeof c.dist_km === "number") {
    const km = Math.max(0, Math.round(c.dist_km * 10) / 10); // 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    parts.push(`üìç –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ~${km} –∫–º –æ—Ç –≤–∞—Å`);
  }
  return parts.join("\n");
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–∏–∫–æ–≥–æ —Ä—è–¥–æ–º")
export async function browseShowNext(bot: TelegramBot, chatId: number, user: DbUser) {
  // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ browse/browse_card
  await setState(chatId, "browse_card");

  const cand = await pickCandidate(chatId, DEFAULT_RADIUS_KM);
  if (!cand) {
    await sendScreen(bot, chatId, user, {
      text: [
        "–ü–æ–∫–∞ –∞–Ω–∫–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å.",
        "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—å —Ä–∞–¥–∏—É—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é " + DEFAULT_RADIUS_KM + " –∫–º)."
      ].join("\n"),
      keyboard: [
        [{ text: "üîÑ –ï—â—ë —Ä–∞–∑", callback_data: "brw:next" }],
        [{ text: "üè† –í –º–µ–Ω—é",  callback_data: "sys:menu" }],
      ]
    });
    return;
  }

  // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ
  await query(
    `INSERT INTO browse_seen (user_id, seen_user_id, ts)
     VALUES ($1, $2, now())
     ON CONFLICT DO NOTHING`,
    [chatId, cand.tg_id]
  );

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
  const caption = buildCardCaption(cand);
  await sendScreen(bot, chatId, user, {
    photoFileId: cand.file_id || undefined,
    text: cand.file_id ? undefined : caption, // –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç (–Ω–µ –¥–æ–ª–∂–Ω–æ), —É–π–¥—ë–º —Ç–µ–∫—Å—Ç–æ–º
    caption: cand.file_id ? caption : undefined,
    keyboard: kb.browseCard(cand.tg_id),
  });
}
