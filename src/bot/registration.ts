// src/bot/registration.ts
import TelegramBot, { Message, ReplyKeyboardMarkup, KeyboardButton } from "node-telegram-bot-api";
import { query } from "../db";
import { DbUser, sendScreen, setState } from "./helpers";
import { TXT } from "../ui/text";
import { Keyboards } from "../ui/keyboards";
import { mkCb } from "../ui/cb";
import { CB } from "../types";
import { showProfile } from "./profile";
import { importPhotosFromTelegramProfile, addPhotoSafely, checkTelegramProfilePhotos, getAllUserPhotos, getTelegramProfilePhotosForPreview, validatePhoto, getBestPhotoSize } from "./photo";
import { createUploadSession, addPhotoToSession, getSessionPhotos, clearUploadSession, canAddMorePhotos, getPhotoCount, setProcessingFlag, isProcessing } from "../lib/uploadSession";
import { reverseGeocode } from "../lib/geocode";
import { hideReplyKeyboard } from "../lib/hideReply";

// === –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ ===
export function validateName(name: string): { valid: boolean; error?: string } {
  const trimmed = name.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
  if (trimmed.length < 2) {
    return { valid: false, error: TXT.validation.nameMinLength };
  }
  
  if (trimmed.length > 50) {
    return { valid: false, error: TXT.validation.nameMaxLength };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
  const allowedPattern = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/;
  if (!allowedPattern.test(trimmed)) {
    return { valid: false, error: TXT.validation.nameInvalidChars };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
  const hasLetters = /[a-zA-Z–∞-—è–ê-–Ø—ë–Å]/.test(trimmed);
  if (!hasLetters) {
    return { valid: false, error: TXT.validation.nameNoLetters };
  }
  
  return { valid: true };
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
export async function handleStartName(bot: TelegramBot, chatId: number, user: DbUser, firstName?: string) {
  if (firstName && firstName.trim()) {
    // –í–∞—Ä–∏–∞–Ω—Ç A: first_name –¥–æ—Å—Ç—É–ø–µ–Ω
    const validation = validateName(firstName);
    if (validation.valid) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
      await query(`UPDATE users SET name=$2, updated_at=now() WHERE tg_id=$1`, [chatId, firstName.trim()]);
      await sendScreen(bot, chatId, user, { 
        text: TXT.start.welcome.replace('{name}', firstName.trim())
      });
      await regAskAge(bot, chatId, user);
      return;
    }
  }
  
  // –í–∞—Ä–∏–∞–Ω—Ç B: first_name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
  await setState(chatId, "reg_name_manual");
  await sendScreen(bot, chatId, user, { 
    text: TXT.start.greeting 
  });
}

// === –í–æ–∑—Ä–∞—Å—Ç ===
export async function regAskAge(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_age");
  await sendScreen(bot, chatId, user, { text: TXT.reg.askAge });
}
export async function handleRegAge(bot: TelegramBot, msg: Message, user: DbUser) {
  if (!msg.text) return;
  const ageText = msg.text.trim();
  const age = Number(ageText);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
  if (isNaN(age) || !Number.isInteger(age) || age < 18 || age > 80) {
    await sendScreen(bot, msg.chat.id, user, { 
      text: TXT.validation.ageInvalid
    });
    return;
  }
  
  await query(`UPDATE users SET age = $2, updated_at = now() WHERE tg_id = $1`, [msg.chat.id, age]);
  await regAskGender(bot, msg.chat.id, user);
}

// === –ü–æ–ª/–∫–æ–≥–æ –∏—â–µ—à—å ===
export async function regAskGender(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_gender");
  await sendScreen(bot, chatId, user, { text: TXT.reg.askGender, keyboard: Keyboards.regGender() });
}
export async function regAskSeek(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_seek");
  await sendScreen(bot, chatId, user, { text: TXT.reg.askSeek, keyboard: Keyboards.regSeek() });
}

// === –ì–æ—Ä–æ–¥ ===

export async function regAskCity(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_city");
  const replyKb: ReplyKeyboardMarkup = {
    keyboard: [
      [ { text: TXT.reg.cityShareBtn, request_location: true } as KeyboardButton ],
      [ { text: TXT.reg.cityManualBtn } ]
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  };
  await sendScreen(bot, chatId, user, { text: TXT.reg.askCity, reply_markup: replyKb });
}


/** –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. */
async function askCityTextWithSuggest(
  bot: TelegramBot,
  chatId: number,
  user: DbUser,
  suggest?: string | null
) {
  await setState(chatId, "reg_city_text");
  const lines = [
    suggest ? TXT.city.confirmSuggest.replace('{city}', suggest) : TXT.city.confirmManual,
    TXT.city.inputHint,
  ];
  const replyKb: ReplyKeyboardMarkup = {
    keyboard: suggest ? [[{ text: suggest }]] : [[{ text: TXT.city.example }]],
    resize_keyboard: true,
    one_time_keyboard: true,
  };
  await sendScreen(bot, chatId, user, {
    text: lines.join("\n"),
    parse_mode: "HTML",
    reply_markup: replyKb,
  });
}

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ "–ì–æ—Ä–æ–¥": –ª–æ–∫–∞—Ü–∏—è -> –ø–æ–¥—Å–∫–∞–∑–∫–∞; –ª–∏–±–æ —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç. */
export async function handleRegCity(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const text = (msg.text ?? "").trim();

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∫–Ω—É–ª "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º" ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (reply —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —É–±–µ—Ä—ë–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞)
  if (text === TXT.reg.cityManualBtn) {
    await askCityTextWithSuggest(bot, chatId, user, undefined);
    return;
  }

  // 1) –ü—Ä–∏—à–ª–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≥–æ—Ä–æ–¥–∞ (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≥–µ–æ–∫–æ–¥–µ—Ä–∞)
  if (msg.location) {
    const { latitude, longitude } = msg.location;

    await query(
      `UPDATE users
         SET geom = ST_SetSRID(ST_MakePoint($2,$3),4326),
             updated_at = now()
       WHERE tg_id = $1`,
      [chatId, longitude, latitude]
    );

    let suggest: string | null = null;
    try {
      const res = await reverseGeocode(latitude, longitude, "ru");
      const name = res.cityName && res.cityName.trim();
      if (name && name.length >= 2) suggest = name;
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      console.warn("Geocoding failed:", error);
    }

    await askCityTextWithSuggest(bot, chatId, user, suggest);
    return;
  }

  // 2) –ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç (—Å—Ç–∏–∫–µ—Ä/—Ñ–æ—Ç–æ –∏ —Ç.–ø.) ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º —ç–∫—Ä–∞–Ω –≥–æ—Ä–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (!text) {
    await regAskCity(bot, chatId, user);
    return;
  }

  // –ï—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π" ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–∏—Å–ª–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑
  if (text === TXT.reg.cityShareBtn) {
    await regAskCity(bot, chatId, user);
    return;
  }

  // 3) –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  const city = text.replace(/\s+/g, " ").trim();
  if (!city || city.length < 2 || city.length > 80) {
    await sendScreen(bot, chatId, user, { 
      text: TXT.validation.cityInvalid
    });
    return;
  }

  await query(
    `UPDATE users
       SET city_name = $2,
           updated_at = now()
     WHERE tg_id = $1`,
    [chatId, city]
  );

  // –°–∫—Ä—ã—Ç—å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–±–µ–∑ –º—É—Å–æ—Ä–∞¬ª –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ç–æ
  await hideReplyKeyboard(bot, chatId);
  await regAskPhoto(bot, chatId, user);
}


// === –ò–º—è ===
export async function regAskName(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_name");
  await sendScreen(bot, chatId, user, { text: "–ö–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å? –í–≤–µ–¥–∏ –∏–º—è/–Ω–∏–∫ (2‚Äì32 —Å–∏–º–≤–æ–ª–∞)." });
}
export async function handleRegName(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const name = (msg.text || "").trim();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
  const validation = validateName(name);
  if (!validation.valid) {
    await sendScreen(bot, chatId, user, { 
      text: validation.error || TXT.validation.nameGeneric
    });
    return;
  }
  
  await query(`UPDATE users SET name=$2, updated_at=now() WHERE tg_id=$1`, [chatId, name]);
  await regAskAbout(bot, chatId, user);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
export async function handleRegNameManual(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const name = (msg.text || "").trim();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
  const validation = validateName(name);
  if (!validation.valid) {
    await sendScreen(bot, chatId, user, { 
      text: validation.error || TXT.validation.nameGeneric
    });
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
  await query(`UPDATE users SET name=$2, updated_at=now() WHERE tg_id=$1`, [chatId, name]);
  await sendScreen(bot, chatId, user, { 
    text: TXT.start.welcome.replace('{name}', name)
  });
  await regAskAge(bot, chatId, user);
}

// === –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∏–º–µ–Ω–∏ ===
export async function startRestartWithName(bot: TelegramBot, chatId: number, user: DbUser, firstName?: string) {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await query(`DELETE FROM photos WHERE user_id=$1`, [chatId]);
  await query(`
    UPDATE users
    SET name=NULL, age=NULL, gender=NULL, seek=NULL,
        city_name=NULL, geom=NULL, about=NULL,
        status='new', state=NULL, updated_at=now()
    WHERE tg_id=$1
  `, [chatId]);

  // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏
  await handleStartName(bot, chatId, user, firstName);
}

// === –û —Å–µ–±–µ (–æ–ø—Ü.) ===
export async function regAskAbout(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_about");
  const text = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.";
  await sendScreen(bot, chatId, user, { text, keyboard: [[{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: mkCb(CB.REG, "about_skip") }]] });
}
export async function handleRegAbout(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const about = (msg.text || "").trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (0 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
  if (about.length > 300) {
    await sendScreen(bot, chatId, user, { 
      text: "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    });
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
  if (about.length > 0) {
    await query(`UPDATE users SET about=$2, updated_at=now() WHERE tg_id=$1`, [chatId, about]);
  }
  
  await regAskPhoto(bot, chatId, user);
}

// === –§–æ—Ç–æ ===
function buildRegPhotoText(loaded: number): string {
  return [
    `–û—Ç–ø—Ä–∞–≤—å 1‚Äì5 —Ñ–æ—Ç–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${loaded}/5.`,
    `–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è¬ª.`,
    ``,
    `‚ÑπÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ <b>–≤–∏–¥–∏–º—ã–µ –±–æ—Ç—É</b> —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:`,
    `‚Ä¢ –ï—Å–ª–∏ –≤ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è ‚â† ¬´–í—Å–µ¬ª, –±–æ—Ç —Ñ–æ—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç;`,
    `‚Ä¢ –í–∏–¥–µ–æ-–∞–≤–∞—Ç–∞—Ä <b>–Ω–µ</b> –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ;`,
    `‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ.`,
  ].join("\n");
}

export async function regAskPhoto(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_photo_method");
  const r = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const c = r.rows[0]?.c ?? 0;
  await sendScreen(bot, chatId, user, { text: buildRegPhotoText(c), keyboard: Keyboards.regPhotoMethod() });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
export async function regPhotoMethod(bot: TelegramBot, chatId: number, user: DbUser, method: string) {
  if (method === "import") {
    await regPhotoImport(bot, chatId, user);
  } else if (method === "upload") {
    await regPhotoUpload(bot, chatId, user);
  }
}

// –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏
export async function regPhotoMethodBack(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_photo_method");
  const r = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const c = r.rows[0]?.c ?? 0;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  await sendScreen(bot, chatId, user, { 
    text: buildRegPhotoText(c), 
    keyboard: Keyboards.regPhotoMethod() 
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å —Ñ–æ—Ç–æ
export async function regShowPhotoCarousel(bot: TelegramBot, chatId: number, user: DbUser, source: "imported" | "uploaded" = "uploaded") {
  await setState(chatId, "reg_photo_carousel");
  
  const photos = await getAllUserPhotos(chatId);
  if (photos.length === 0) {
    await regShowNoPhoto(bot, chatId, user);
    return;
  }
  
  const currentIndex = 0;
  const caption = source === "imported" 
    ? `üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${photos.length} —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
    : `üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  await sendScreen(bot, chatId, user, {
    photoFileId: photos[currentIndex],
    caption,
    keyboard: Keyboards.regPhotoCarousel(photos.length, currentIndex)
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –±–µ–∑ —Ñ–æ—Ç–æ
export async function regShowNoPhoto(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_no_photo");
  
  const text = `üë§ –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏.`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  await sendScreen(bot, chatId, user, {
    text,
    keyboard: Keyboards.regNoPhoto()
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞ —Ñ–æ—Ç–æ
export async function regShowImportPreview(bot: TelegramBot, chatId: number, user: DbUser, profilePhotos: string[]) {
  await setState(chatId, "reg_photo_import_preview");
  
  const currentIndex = 0;
  const caption = `üì• –ù–∞–π–¥–µ–Ω–æ ${profilePhotos.length} —Ñ–æ—Ç–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å.`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  await sendScreen(bot, chatId, user, {
    photoFileId: profilePhotos[currentIndex],
    caption,
    keyboard: Keyboards.regPhotoCarousel(profilePhotos.length, currentIndex)
  });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–º–ø–æ—Ä—Ç–∞
export async function regImportPreviewNav(bot: TelegramBot, chatId: number, user: DbUser, index: number) {
  // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const cur = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const currentCount = cur.rows[0]?.c ?? 0;
  const availableSlots = 5 - currentCount;
  const profilePhotos = await getTelegramProfilePhotosForPreview(bot, chatId, availableSlots);
  
  if (profilePhotos.length === 0) {
    await regShowNoPhoto(bot, chatId, user);
    return;
  }
  
  const safeIndex = ((Number.isFinite(index) ? index : 0) % profilePhotos.length + profilePhotos.length) % profilePhotos.length;
  const caption = `üì• –ù–∞–π–¥–µ–Ω–æ ${profilePhotos.length} —Ñ–æ—Ç–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å.`;
  
  try {
    await bot.editMessageMedia({
      type: "photo",
      media: profilePhotos[safeIndex],
      caption,
      parse_mode: "HTML"
    }, {
      chat_id: chatId,
      message_id: user.last_screen_msg_id || undefined,
      reply_markup: { inline_keyboard: Keyboards.regPhotoCarousel(profilePhotos.length, safeIndex) }
    });
    return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (user.last_screen_msg_id) {
      try {
        await bot.deleteMessage(chatId, user.last_screen_msg_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await sendScreen(bot, chatId, user, {
      photoFileId: profilePhotos[safeIndex],
      caption,
      keyboard: Keyboards.regPhotoCarousel(profilePhotos.length, safeIndex)
    });
  }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ì–æ—Ç–æ–≤–æ"
export async function regImportPhotos(bot: TelegramBot, chatId: number, user: DbUser) {
  const cur = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const currentCount = cur.rows[0]?.c ?? 0;
  const availableSlots = 5 - currentCount;
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É
  const imported = await importPhotosFromTelegramProfile(bot, chatId, { 
    replace: false, 
    limit: availableSlots 
  });
  
  if (imported > 0) {
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await regConfirm(bot, chatId, user);
  } else {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await regConfirm(bot, chatId, user);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
export async function regShowUploadPreview(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_photo_upload_preview");
  
  const photos = getSessionPhotos(chatId);
  console.log(`[DEBUG] regShowUploadPreview: chatId=${chatId}, photos.length=${photos.length}, photos=${JSON.stringify(photos)}`);
  
  if (photos.length === 0) {
    await sendScreen(bot, chatId, user, { 
      text: "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  const currentIndex = 0;
  const caption = `üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ\n\n–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\nüì∏ –§–æ—Ç–æ 1 –∏–∑ ${photos.length}`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  await sendScreen(bot, chatId, user, {
    photoFileId: photos[currentIndex],
    caption,
    keyboard: Keyboards.regPhotoCarousel(photos.length, currentIndex)
  });
}


// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
export async function regUploadPreviewNav(bot: TelegramBot, chatId: number, user: DbUser, index: number) {
  const photos = getSessionPhotos(chatId);
  console.log(`[DEBUG] regUploadPreviewNav: chatId=${chatId}, photos.length=${photos.length}, photos=${JSON.stringify(photos)}`);
  
  if (photos.length === 0) {
    await sendScreen(bot, chatId, user, { 
      text: "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  const safeIndex = ((Number.isFinite(index) ? index : 0) % photos.length + photos.length) % photos.length;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
  try {
    await bot.editMessageMedia({
      type: "photo",
      media: photos[safeIndex],
      caption: `üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ\n\n–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\nüì∏ –§–æ—Ç–æ ${safeIndex + 1} –∏–∑ ${photos.length}`,
      parse_mode: "HTML"
    }, {
      chat_id: chatId,
      message_id: user.last_screen_msg_id || undefined,
      reply_markup: { inline_keyboard: Keyboards.regPhotoCarousel(photos.length, safeIndex) }
    });
    return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (user.last_screen_msg_id) {
      try {
        await bot.deleteMessage(chatId, user.last_screen_msg_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await sendScreen(bot, chatId, user, {
      photoFileId: photos[safeIndex],
      caption: `üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ\n\n–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\nüì∏ –§–æ—Ç–æ ${safeIndex + 1} –∏–∑ ${photos.length}`,
      keyboard: Keyboards.regPhotoCarousel(photos.length, safeIndex)
    });
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å
export async function regSaveUploadedPhotos(bot: TelegramBot, chatId: number, user: DbUser) {
  const photos = getSessionPhotos(chatId);
  if (photos.length === 0) {
    await regConfirm(bot, chatId, user);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ –±–∞–∑–µ
  const cur = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const currentCount = cur.rows[0]?.c ?? 0;
  const availableSlots = 5 - currentCount;
  
  if (availableSlots <= 0) {
    await sendScreen(bot, chatId, user, { 
      text: "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
      keyboard: Keyboards.regPhotoMethod()
    });
    clearUploadSession(chatId);
    await regConfirm(bot, chatId, user);
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É (–Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤)
  const photosToSave = photos.slice(0, availableSlots);
  let savedCount = 0;
  
  for (const fileId of photosToSave) {
    try {
      await addPhotoSafely(chatId, fileId);
      savedCount++;
    } catch (error) {
      console.error("Error saving photo:", error);
    }
  }
  
  // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
  clearUploadSession(chatId);
  
  if (savedCount > 0) {
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await regConfirm(bot, chatId, user);
  } else {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await regConfirm(bot, chatId, user);
  }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—É—Å–µ–ª–∏ —Ñ–æ—Ç–æ
export async function regPhotoCarouselNav(bot: TelegramBot, chatId: number, user: DbUser, index: number) {
  const photos = await getAllUserPhotos(chatId);
  if (photos.length === 0) {
    await regShowNoPhoto(bot, chatId, user);
    return;
  }
  
  const safeIndex = ((Number.isFinite(index) ? index : 0) % photos.length + photos.length) % photos.length;
  const caption = `üì∏ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ ${safeIndex + 1}/${photos.length}\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`;
  
  try {
    await bot.editMessageMedia({
      type: "photo",
      media: photos[safeIndex],
      caption,
      parse_mode: "HTML"
    }, {
      chat_id: chatId,
      message_id: user.last_screen_msg_id || undefined,
      reply_markup: { inline_keyboard: Keyboards.regPhotoCarousel(photos.length, safeIndex) }
    });
    return; // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (user.last_screen_msg_id) {
      try {
        await bot.deleteMessage(chatId, user.last_screen_msg_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendScreen –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await sendScreen(bot, chatId, user, {
      photoFileId: photos[safeIndex],
      caption,
      keyboard: Keyboards.regPhotoCarousel(photos.length, safeIndex)
    });
  }
}

// –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
export async function regPhotoImport(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_photo_import_preview");
  
  const cur = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const currentCount = cur.rows[0]?.c ?? 0;
  
  if (currentCount >= 5) {
    await sendScreen(bot, chatId, user, {
      text: "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (5/5).",
      keyboard: Keyboards.regPhotoMethod()
    });
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –≤ –±–∞–∑—É)
  const availableSlots = 5 - currentCount;
  const profilePhotos = await getTelegramProfilePhotosForPreview(bot, chatId, availableSlots);
  
  if (profilePhotos.length === 0) {
    await sendScreen(bot, chatId, user, {
      text: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ.",
      keyboard: Keyboards.regNoPhoto()
    });
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
  await regShowImportPreview(bot, chatId, user, profilePhotos);
}

// –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
export async function regPhotoUpload(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_photo_upload");
  
  const r = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const c = r.rows[0]?.c ?? 0;
  
  if (c >= 5) {
    await sendScreen(bot, chatId, user, {
      text: "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (5/5).",
      keyboard: Keyboards.regPhotoMethod()
    });
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
  const maxPhotos = 5; // –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  createUploadSession(chatId, maxPhotos);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  await sendScreen(bot, chatId, user, {
    text: `üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º ${maxPhotos}).`,
    keyboard: Keyboards.regPhotoUpload()
  });
}

export async function handleRegPhotoMessage(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  if (user.state !== "reg_photo_upload") {
    await sendScreen(bot, chatId, user, { 
      text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.",
      keyboard: Keyboards.regPhotoMethod()
    });
    return;
  }
  
  if (!msg.photo || msg.photo.length === 0) {
    await sendScreen(bot, chatId, user, { 
      text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
  const bestPhoto = getBestPhotoSize(msg.photo);
  if (!bestPhoto) {
    await sendScreen(bot, chatId, user, { 
      text: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
  const validation = validatePhoto(bestPhoto);
  if (!validation.valid) {
    await sendScreen(bot, chatId, user, { 
      text: validation.error || "–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
  if (!canAddMorePhotos(chatId)) {
    await sendScreen(bot, chatId, user, { 
      text: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: 5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º—ã–µ –ª—É—á—à–∏–µ!",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é
  const result = addPhotoToSession(chatId, bestPhoto.file_id);
  console.log(`[DEBUG] handleRegPhotoMessage: chatId=${chatId}, addPhoto result=${JSON.stringify(result)}`);
  
  if (!result.success) {
    await sendScreen(bot, chatId, user, { 
      text: result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.",
      keyboard: Keyboards.regPhotoUpload()
    });
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const photosAfterAdd = getSessionPhotos(chatId);
  console.log(`[DEBUG] handleRegPhotoMessage: after add, photos.length=${photosAfterAdd.length}, photos=${JSON.stringify(photosAfterAdd)}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ
  if (isProcessing(chatId)) {
    // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º - UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  setProcessingFlag(chatId, true);
  
  try {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ last_screen_msg_id
    const freshUser = await query(`
      SELECT tg_id::text, username, name, state, last_screen_msg_id::text, last_screen_at::text, status
      FROM users WHERE tg_id = $1
    `, [chatId]);
    
    const updatedUser = freshUser.rows[0];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
    // sendScreen —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await regShowUploadPreview(bot, chatId, updatedUser as DbUser);
    
  } finally {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    setProcessingFlag(chatId, false);
  }
}

// === –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
export async function regShowPreview(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_preview");
  const { buildProfileCaption, getMainPhotoFileId } = await import("./profile");
  const caption = await buildProfileCaption(chatId);
  const mainPhoto = await getMainPhotoFileId(chatId);
  if (!mainPhoto) {
    await regAskPhoto(bot, chatId, user);
    return;
  }
  await sendScreen(bot, chatId, user, {
    photoFileId: mainPhoto, 
    caption,
    parse_mode: "HTML",
    keyboard: [
      [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",    callback_data: mkCb(CB.REG, "confirm") }],
      [{ text: "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",  callback_data: mkCb(CB.REG, "photo_again") }],
    ],
  });
}

export async function regConfirm(bot: TelegramBot, chatId: number, user: DbUser) {
  await query(`UPDATE users SET status='active', state='idle', updated_at=now() WHERE tg_id=$1`, [chatId]);
  await showProfile(bot, chatId, user);
}
