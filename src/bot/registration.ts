// src/bot/registration.ts
import TelegramBot, { Message, ReplyKeyboardMarkup, KeyboardButton } from "node-telegram-bot-api";
import { query } from "../db";
import { DbUser, sendScreen, setState } from "./helpers";
import { TXT } from "../ui/text";
import { kb } from "../ui/buttons";
import { showProfile } from "./profile";
import { importPhotosFromTelegramProfile, addPhotoSafely } from "./photo";
import { reverseGeocode } from "../lib/geocode";
import { hideReplyKeyboard } from "../lib/hideReply";

// === –í–æ–∑—Ä–∞—Å—Ç ===
export async function regAskAge(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_age");
  await sendScreen(bot, chatId, user, { text: TXT.reg.askAge });
}
export async function handleRegAge(bot: TelegramBot, msg: Message, user: DbUser) {
  if (!msg.text) return;
  const age = Number(msg.text.trim());
  if (!Number.isInteger(age) || age < 18 || age > 80) {
    await bot.sendMessage(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18‚Äì80).");
    return;
  }
  await query(`UPDATE users SET age = $2, updated_at = now() WHERE tg_id = $1`, [msg.chat.id, age]);
  await regAskGender(bot, msg.chat.id, user);
}

// === –ü–æ–ª/–∫–æ–≥–æ –∏—â–µ—à—å ===
export async function regAskGender(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_gender");
  await sendScreen(bot, chatId, user, { text: TXT.reg.askGender, keyboard: kb.regGender() });
}
export async function regAskSeek(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_seek");
  await sendScreen(bot, chatId, user, { text: TXT.reg.askSeek, keyboard: kb.regSeek() });
}

// === –ì–æ—Ä–æ–¥ ===

export async function regAskCity(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_city");
  const replyKb: ReplyKeyboardMarkup = {
    keyboard: [
      [ { text: TXT.reg.cityShareBtn, request_location: true } as KeyboardButton ],
      [ { text: TXT.reg.cityManualBtn } ]
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  };
  await bot.sendMessage(chatId, TXT.reg.askCity, { reply_markup: replyKb });
}


/** –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. */
async function askCityTextWithSuggest(
  bot: TelegramBot,
  chatId: number,
  user: DbUser,
  suggest?: string | null
) {
  await setState(chatId, "reg_city_text");
  const lines = [
    suggest ? `–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ <b>${suggest}</b>.` : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å –≥–æ—Ä–æ–¥.",
    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.\n–ü—Ä–∏–º–µ—Ä: ¬´–ú–æ—Å–∫–≤–∞¬ª.",
  ];
  const replyKb: ReplyKeyboardMarkup = {
    keyboard: suggest ? [[{ text: suggest }]] : [[{ text: "–ú–æ—Å–∫–≤–∞" }]],
    resize_keyboard: true,
    one_time_keyboard: true,
  };
  await bot.sendMessage(chatId, lines.join("\n"), {
    parse_mode: "HTML",
    reply_markup: replyKb,
  });
}

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ "–ì–æ—Ä–æ–¥": –ª–æ–∫–∞—Ü–∏—è -> –ø–æ–¥—Å–∫–∞–∑–∫–∞; –ª–∏–±–æ —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç. */
export async function handleRegCity(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const text = (msg.text ?? "").trim();

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∫–Ω—É–ª "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º" ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (reply —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —É–±–µ—Ä—ë–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞)
  if (text === TXT.reg.cityManualBtn) {
    await askCityTextWithSuggest(bot, chatId, user, undefined);
    return;
  }

  // 1) –ü—Ä–∏—à–ª–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≥–æ—Ä–æ–¥–∞ (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≥–µ–æ–∫–æ–¥–µ—Ä–∞)
  if (msg.location) {
    const { latitude, longitude } = msg.location;

    await query(
      `UPDATE users
         SET geom = ST_SetSRID(ST_MakePoint($2,$3),4326),
             updated_at = now()
       WHERE tg_id = $1`,
      [chatId, longitude, latitude]
    );

    let suggest: string | null = null;
    try {
      const res = await reverseGeocode(latitude, longitude, "ru");
      const name = res.cityName && res.cityName.trim();
      if (name && name.length >= 2) suggest = name;
    } catch {}

    await askCityTextWithSuggest(bot, chatId, user, suggest);
    return;
  }

  // 2) –ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç (—Å—Ç–∏–∫–µ—Ä/—Ñ–æ—Ç–æ –∏ —Ç.–ø.) ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º —ç–∫—Ä–∞–Ω –≥–æ—Ä–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (!text) {
    await regAskCity(bot, chatId, user);
    return;
  }

  // –ï—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π" ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–∏—Å–ª–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑
  if (text === TXT.reg.cityShareBtn) {
    await regAskCity(bot, chatId, user);
    return;
  }

  // 3) –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  const city = text.replace(/\s+/g, " ").trim();
  if (city.length < 2 || city.length > 80) {
    await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (2‚Äì80 —Å–∏–º–≤–æ–ª–æ–≤).");
    return;
  }

  await query(
    `UPDATE users
       SET city_name = $2,
           updated_at = now()
     WHERE tg_id = $1`,
    [chatId, city]
  );

  // –°–∫—Ä—ã—Ç—å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–±–µ–∑ –º—É—Å–æ—Ä–∞¬ª –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–º–µ–Ω–∏
  await hideReplyKeyboard(bot, chatId);
  await regAskName(bot, chatId, user);
}


// === –ò–º—è ===
export async function regAskName(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_name");
  await sendScreen(bot, chatId, user, { text: "–ö–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å? –í–≤–µ–¥–∏ –∏–º—è/–Ω–∏–∫ (2‚Äì32 —Å–∏–º–≤–æ–ª–∞)." });
}
export async function handleRegName(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const name = (msg.text || "").trim();
  if (name.length < 2 || name.length > 32) {
    await bot.sendMessage(chatId, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 2‚Äì32 —Å–∏–º–≤–æ–ª–∞.");
    return;
  }
  await query(`UPDATE users SET name=$2, updated_at=now() WHERE tg_id=$1`, [chatId, name]);
  await regAskAbout(bot, chatId, user);
}

// === –û —Å–µ–±–µ (–æ–ø—Ü.) ===
export async function regAskAbout(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_about");
  const text = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.";
  await sendScreen(bot, chatId, user, { text, keyboard: [[{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "reg:about_skip" }]] });
}
export async function handleRegAbout(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const about = (msg.text || "").trim();
  if (about.length > 300) {
    await bot.sendMessage(chatId, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.");
    return;
  }
  if (about.length > 0) {
    await query(`UPDATE users SET about=$2, updated_at=now() WHERE tg_id=$1`, [chatId, about]);
  }
  await regAskPhoto(bot, chatId, user);
}

// === –§–æ—Ç–æ ===
function buildRegPhotoText(loaded: number): string {
  return [
    `–û—Ç–ø—Ä–∞–≤—å 1‚Äì3 —Ñ–æ—Ç–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${loaded}/3.`,
    `–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è¬ª.`,
    ``,
    `‚ÑπÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ <b>–≤–∏–¥–∏–º—ã–µ –±–æ—Ç—É</b> —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:`,
    `‚Ä¢ –ï—Å–ª–∏ –≤ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è ‚â† ¬´–í—Å–µ¬ª, –±–æ—Ç —Ñ–æ—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç;`,
    `‚Ä¢ –í–∏–¥–µ–æ-–∞–≤–∞—Ç–∞—Ä <b>–Ω–µ</b> –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ;`,
    `‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ.`,
  ].join("\n");
}

export async function regAskPhoto(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_photo");
  const cur = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  if ((cur.rows[0]?.c ?? 0) === 0) {
    const imported = await importPhotosFromTelegramProfile(bot, chatId, { replace: false, limit: 3 });
    if (imported > 0) {
      await regShowPreview(bot, chatId, user);
      return;
    }
  }
  const r = await query<{ c: number }>(`SELECT COUNT(*)::int AS c FROM photos WHERE user_id=$1`, [chatId]);
  const c = r.rows[0]?.c ?? 0;
  await sendScreen(bot, chatId, user, { text: buildRegPhotoText(c), keyboard: kb.regPhotoActions() });
}

export async function handleRegPhotoMessage(bot: TelegramBot, msg: Message, user: DbUser) {
  const chatId = msg.chat.id;
  const best = (msg.photo || []).slice(-1)[0];
  if (!best) return;
  try {
    const { total } = await addPhotoSafely(chatId, best.file_id);
    await bot.sendMessage(chatId, `–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${total}/3).`, {
      reply_markup: { inline_keyboard: [[{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: "reg:photo_done" }]] }
    });
  } catch (e: any) {
    if (e && String(e.message).includes("LIMIT_REACHED")) {
      await bot.sendMessage(chatId, "–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª –∏–ª–∏ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è¬ª.");
    } else {
      await bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
    }
  }
}

// === –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
export async function regShowPreview(bot: TelegramBot, chatId: number, user: DbUser) {
  await setState(chatId, "reg_preview");
  const { buildProfileCaption, getMainPhotoFileId } = await import("./profile");
  const caption = await buildProfileCaption(chatId);
  const mainPhoto = await getMainPhotoFileId(chatId);
  if (!mainPhoto) {
    await regAskPhoto(bot, chatId, user);
    return;
  }
  await sendScreen(bot, chatId, user, {
    photoFileId: mainPhoto, caption,
    keyboard: [
      [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",    callback_data: "reg:confirm" }],
      [{ text: "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",  callback_data: "reg:photo_again" }],
    ],
  });
}

export async function regConfirm(bot: TelegramBot, chatId: number, user: DbUser) {
  await query(`UPDATE users SET status='active', state='idle', updated_at=now() WHERE tg_id=$1`, [chatId]);
  await showProfile(bot, chatId, user);
}
